<?xml version="1.0"?>
<launch>
  <arg name="robot_name" default="kuka" />
  <arg name="use_ros_control" default="True" /> <!-- in case of true use the ros controller plugin with update rate etc. set it to false if you wanna use it with moveIt! -->

  <arg name="motors_controller_type" default="PositionJointInterface" /> <!-- PositionJointInterface, velocity, position -->

   <!-- Camera:  -->
   <arg name="use_camera" default="True" />
   <arg name="camera_name" default="my_camera" />
   <arg name="use_realsense" default="True" />
   <arg name="use_asus_xtion" default="False" />
   <arg name="camera_pos_z" default="2.4" />

    <!-- Ball: -->
    <arg name="use_ball" default="True" />
    <arg name="ball_name" default="ball" />
    <arg name="ball_x_pos" default="1.67" />
    <arg name="ball_y_pos" default="0.14" />
    <arg name="ball_z_pos" default="0.67" />

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="true"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>

  <!-- We resume the logic in empty_world.launch -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

  <include file="$(find kr5_description)/launch/kr5_upload.launch">
     <arg name="robot_name" value="$(arg robot_name)" />
     <arg name="use_ros_control" value="$(arg use_ros_control)" />
  </include>

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
        args="-urdf -model $(arg robot_name) -param robot_description -x 0.2 -y 0.2 -z 0.0"/>

  <include file="$(find kuka_kr5_control)/launch/manipulator_control.launch">
     <arg name="robot_name" value="$(arg robot_name)" />
  </include>

  <!-- start the controller_node to control the plate's position for example -->
  <include file="$(find kuka_kr5_control)/launch/start_control_node.launch">
     <arg name="motors_controller_type" value="$(arg motors_controller_type)" />
  </include>


    <!-- just load the camera -->
    <group ns="$(arg camera_name)" if="$(arg use_camera)">
         <include file="$(find camera_description)/launch/load_camera.launch">
             <arg name="camera_name" value="$(arg camera_name)" />
             <arg name="use_realsense" default="$(arg use_realsense)" />
             <arg name="use_asus_xtion" default="$(arg use_asus_xtion)" />
             <arg name="camera_pos_z" default="$(arg camera_pos_z)" />
          </include>

         <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model $(arg camera_name) -param robot_description
        -x 0.0 -y 0.0 -z 0.0
         -R 0.0 -P 0.0 -Y 0.0" />

     <node name="robot_state_publisher_camera" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
         <remap from="/joint_states" to="/$(arg camera_name)/joint_states" />
     </node>

           <!-- for static models:
         rosrun tf static_transform_publisher x y z yaw  pitch roll frame_id child_frame_id  period(milliseconds) -->
         <node pkg="tf" type="static_transform_publisher" name="camera_mount_link_to_world" args="0 0 0 0 0 0  /world /camera_footprint 200" />
    </group>






<!--<node name="pub_zero_position" pkg="rostopic" type="publish" output="screen"
      args="/kuka/control_command geometry_msg/Point x: 1.0 y: 0.0   z: 0.0"/>-->


    <!-- just load ball description: -->
    <group ns="$(arg ball_name)" if="$(arg use_ball)">
       <include file="$(find ball_description)/launch/load_ball.launch">
          <arg name="ball_name" value="$(arg ball_name)" />
       </include>

        <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model $(arg ball_name) -param robot_description
        -x $(arg ball_x_pos) -y $(arg ball_y_pos) -z $(arg ball_z_pos)
        -R 0.0 -P 0.0 -Y 0.0" />

       <node name="robot_state_publisher_ball" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
          <remap from="/joint_states" to="/$(arg ball_name)/joint_states" />
       </node>
    </group>

   <node name="odom_to_tf_ball" pkg="message_to_tf" type="message_to_tf">
      <param name="odometry_topic" type="string" value="/gazebo/$(arg ball_name)/odom" />
      <param name="child_frame_id" type="string" value="ball_footprint" />
   </node>

</launch>


